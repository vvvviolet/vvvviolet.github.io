[{"content":"Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式的new一个B的对象。 采用依赖注入技术之后，A的代码只需要定义一个私有的B对象，不需要直接new来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。而具体获取的方法、对象被获取时的状态由配置文件（如XML）来指定。\n就是程序里不用再new了，托管出去，让第三方来new。\nIoC模式，系统中通过引入实现了IoC模式的IoC容器，即可由IoC容器来管理对象的生命周期、依赖关系等，从而使得应用程序的配置和依赖性规范与实际的应用程序代码分离。其中一个特点就是通过文本的配置文件进行应用程序组件间相互关系的配置，而不用重新修改并编译具体的代码。\n当前比较知名的IoC容器有：Pico Container、Avalon 、Spring、JBoss、HiveMind、EJB等。 在上面的几个IoC容器中，轻量级的有Pico Container、Avalon、Spring、HiveMind等，超重量级的有EJB，而半轻半重的有容器有JBoss，Jdon等。\n","date":"2022-05-04T00:00:00Z","permalink":"https://vvvviolet.github.io/p/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/","title":"依赖注入"},{"content":"参考资料：\n gdb手册  BIOS BIOS 的作用就是自检，然后从 MBR 中读取出启动引导程序。那么，启动引导程序最主要的作用就是加载操作系统的内核。当然，每种操作系统的启动引导程序都是不同的。\n简单地理解 BIOS，它就是固化在主板上一个 ROM（只读存储器）芯片上的程序，主要保存计算机的基本输入/输出信息、系统设置信息、开机自检程和系统自启动程序，用来为计算机提供最底层和最直接的硬件设置与控制\n也就是说，BIOS 是硬件与软件之间的接口，而且是非常基本的接口，BIOS 提供了一组基本的操作系统使用的指令，系统启动的成功与否，依赖于 BIOS。\nBIOS 的初始化主要完成以下 3 项工作：\n 第一次检查计算机硬件和外围设备（第二次自检由内核完后，后续会讲），例如 CPU、内存、风扇灯。当 BIOS 一启动，就会做一个自我检测的工作，整个自检过程也被称为 POST（Power On Self Test）自检。 如果自检没有问题，BIOS 开始对硬件进行初始化，并规定当前可启动设备的先后顺序，选择由那个设备来开机。 选择好开启设备后，就会从该设备的 MBR（主引导目录）中读取 Boot Loader（启动引导程序）并执行。启动引导程序用于引导操作系统启动，Linux 系统中默认使用的启动引导程序是 GRUB。  当 MBR 被加载到 RAM 之后，BIOS 就会将控制权交给 MBR，进入系统引导的第二阶段。\nMBR 主引导记录 MBR 共占用了一个扇区，也就是 512 Byte。其中 446 Byte 安装了启动引导程序，其后 64 Byte 描述分区表，最后的 2 Byte 是结束标记\nGDT，LDT Intel的设计者门提供了一个寄存器GDTR用来存放GDT的入口地址，程序员将GDT设定在内存中某个位置之后，可以通过LGDT指令将GDT的入口地址装入此寄存器，从此以后，CPU就根据此寄存器中的内容作为GDT的入口来访问GDT了。\nGDT全局 LDT局部\n段选择子Selector 三部分：描述符索引（index）、TI（指示从GDT还是LDT中找）、请求特权级（RPL）\nmit6.828 lab1 PC 的软盘和硬盘被划分为 512 字节的区域，称为扇区。扇区是磁盘的最小传输粒度：每次读取或写入操作的大小必须是一个或多个扇区，并且在扇区边界上对齐\nboot loader 的两个主要功能  将处理器从实模式转换为32位保护模式 引导加载程序通过 x86 的特殊 I/O 指令直接访问 IDE 磁盘设备寄存器  编写设备驱动程序实际上是 OS 开发的一个非常重要的部分，但从概念或体系结构的角度来看，它也是最不有趣的部分之一，暂时略过。\nELF 二进制文件以一个固定长度的ELF 标头开始，然后是一个可变长度的程序标头 ，其中列出了要加载的每个程序部分。这些 ELF 标头的 C 定义位于inc/elf.h 中。我们感兴趣的程序部分是：\n .text：程序的可执行指令。 .rodata：只读数据，例如由 C 编译器生成的 ASCII 字符串常量。（不过，我们不会费心设置硬件来禁止写入。） .data：数据部分保存程序的初始化数据，例如使用int x = 5 等初始化器声明的全局变量；  当链接器计算程序的内存布局时，它会为未初始化的全局变量保留空间，例如int x，在内存中紧跟.data的名为.bss的部分中\nC要求“未初始化的”全局变量以零值开头。因此，无需在ELF二进制文件中存储.bss的内容；相反，链接器只记录.bss部分的地址和大小。加载程序或程序本身必须将.bss部分归零。\n1  objdump -h obj/kern/kernel   -h, \u0026ndash;[section-]headers Display the contents of the section headers\n VMA 链接地址，节期望执行的内存地址 LMA 加载地址，一个节的加载地址是该节应该被加载到内存中的内存地址  通常，链接地址和加载地址是相同的\n vaddr 虚拟地址 paddr 物理地址 memsz filesz 加载区域大小  ","date":"2022-05-01T00:00:00Z","image":"https://vvvviolet.github.io/p/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-mit6.828-lab1gdtldtbios/dasheng_hu693e2bae57e805ec5716d30ce934f178_81599_120x120_fill_q75_box_smart1.jpg","permalink":"https://vvvviolet.github.io/p/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84%E5%86%99%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-mit6.828-lab1gdtldtbios/","title":"【从0开始的写操作系统】 mit6.828 lab1|GDT,LDT,BIOS"},{"content":"《天地人丛书》  凡气，清则通，昏则壅，天有光风霁月、曀阴霾雾之异，人有高明广大、庸沓鄙陋之殊，其理一也。清极则神。\n  天道不穷，寒暑也；众动不穷，屈伸也。寒已而暑，暑已而寒，循环而如相反，四时之行，生杀之用，尽此矣：盖二气之嘘吸也。屈者屈其所伸，伸者伸其所屈，群动之变，不能离此二用，动静、语默、喜怒、行藏之变，尽此矣：盖二气之舒敛也。鬼神之实，不越二端而已矣。一嘘一吸，一舒一敛，升降离合于太虚之中，乃阴阳必有之几。则鬼神者，天之所显而即人之藏也。静以成形，鬼之属也，而可以迎神而来；动而成用，神之属也，而将成乎鬼以往。屈伸因乎时，而尽性以存神，则天命立于在我，与鬼神合其吉凶矣。\n ","date":"2022-04-09T00:00:00Z","image":"https://vvvviolet.github.io/p/jcx_huf699db22a22125bc090cfbed79cc25dd_69282_120x120_fill_q75_box_smart1.jpg","permalink":"https://vvvviolet.github.io/p/","title":"天地人之道"}]